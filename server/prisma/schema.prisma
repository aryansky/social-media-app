generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  username     String
  email        String        @unique
  posts        Post[]
  following    Follow[]      @relation("follower") // This relation actually returns all the people user is following
  follower     Follow[]      @relation("following") // This relation actually returns all the followers of user
  comments     Comment[]
  commentVotes CommentVote[]
  accounts     Account[]
  postVotes    PostVote[]
}

model Account {
  id         String  @id @default(uuid())
  user       User    @relation(fields: [userId], references: [id])
  userId     String
  provider   String
  providerId String
  password   String?
}

model Post {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  title     String
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  comments  Comment[]
  postTags  PostTag[]
  postVotes PostVote[]
}

model Follow {
  id          String @id @default(uuid())
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@unique([followerId, followingId])
}

model Comment {
  id              String        @id @default(uuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  post            Post          @relation(fields: [postId], references: [id])
  postId          String
  parent          Comment?      @relation("CommentToReplies", fields: [parentCommentId], references: [id])
  parentCommentId String?
  replies         Comment[]     @relation("CommentToReplies")
  content         String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  commentVotes    CommentVote[]
}

model Tag {
  id       String    @id @default(uuid())
  label    String    @unique
  postTags PostTag[]
}

model PostTag {
  id     String @id @default(uuid())
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  tag    Tag    @relation(fields: [tagId], references: [id])
  tagId  String

  @@unique([postId, tagId])
}

model CommentVote {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String
  vote      Int

  @@unique([userId, commentId])
}

model PostVote {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  vote   Int

  @@unique([userId, postId])
}
